// Code generated by "genlifx"; DO NOT EDIT.
package lan

import (
	"bytes"
	"encoding/binary"
	"fmt"
)

// message types
const (
	MultiZoneExtendedGetColorZonesType  = 511
	MultiZoneExtendedSetColorZonesType  = 510
	MultiZoneExtendedStateMultiZoneType = 512
	MultiZoneGetColorZonesType          = 502
	MultiZoneGetEffectType              = 507
	MultiZoneSetColorZonesType          = 501
	MultiZoneSetEffectType              = 508
	MultiZoneStateEffectType            = 509
	MultiZoneStateMultiZoneType         = 506
	MultiZoneStateZoneType              = 503
)

/////////////////////////////////////////////////////////////////////////////

type MultiZoneExtendedGetColorZones struct{}

func (m MultiZoneExtendedGetColorZones) Size() uint16 {
	return 0
}

func (m MultiZoneExtendedGetColorZones) Type() uint16 {
	return MultiZoneExtendedGetColorZonesType
}

func (m MultiZoneExtendedGetColorZones) MarshalBinary() ([]byte, error) {
	return []byte{}, nil
}

func (m *MultiZoneExtendedGetColorZones) UnmarshalBinary(data []byte) error {
	if len(data) > 0 {
		return fmt.Errorf("expected empty packet, got %d bytes", len(data))
	}

	return nil
}

/////////////////////////////////////////////////////////////////////////////

type MultiZoneExtendedSetColorZones struct {
	Duration    uint32
	Apply       MultiZoneExtendedApplicationRequest
	Index       uint16
	ColorsCount uint8
	Colors      [82]LightHsbk
}

func (m MultiZoneExtendedSetColorZones) Size() uint16 {
	return 664
}

func (m MultiZoneExtendedSetColorZones) Type() uint16 {
	return MultiZoneExtendedSetColorZonesType
}

func (m MultiZoneExtendedSetColorZones) MarshalBinary() ([]byte, error) {
	b := &bytes.Buffer{}

	data := []interface{}{
		m.Duration,
		m.Apply,
		m.Index,
		m.ColorsCount,
		m.Colors,
	}
	for _, d := range data {
		if err := binary.Write(b, endian, d); err != nil {
			return nil, err
		}
	}

	return b.Bytes(), nil
}

func (m *MultiZoneExtendedSetColorZones) UnmarshalBinary(data []byte) error {
	if int(m.Size()) != len(data) {
		return fmt.Errorf("expected %d bytes, got %d", m.Size(), len(data))
	}

	b := bytes.NewBuffer(data)
	vars := []interface{}{
		&m.Duration,
		&m.Apply,
		&m.Index,
		&m.ColorsCount,
		&m.Colors,
	}
	for _, v := range vars {
		if err := binary.Read(b, endian, v); err != nil {
			return fmt.Errorf("unable to read packet: %s", err)
		}
	}

	return nil
}

/////////////////////////////////////////////////////////////////////////////

type MultiZoneExtendedStateMultiZone struct {
	Count       uint16
	Index       uint16
	ColorsCount uint8
	Colors      [82]LightHsbk
}

func (m MultiZoneExtendedStateMultiZone) Size() uint16 {
	return 661
}

func (m MultiZoneExtendedStateMultiZone) Type() uint16 {
	return MultiZoneExtendedStateMultiZoneType
}

func (m MultiZoneExtendedStateMultiZone) MarshalBinary() ([]byte, error) {
	b := &bytes.Buffer{}

	data := []interface{}{
		m.Count,
		m.Index,
		m.ColorsCount,
		m.Colors,
	}
	for _, d := range data {
		if err := binary.Write(b, endian, d); err != nil {
			return nil, err
		}
	}

	return b.Bytes(), nil
}

func (m *MultiZoneExtendedStateMultiZone) UnmarshalBinary(data []byte) error {
	if int(m.Size()) != len(data) {
		return fmt.Errorf("expected %d bytes, got %d", m.Size(), len(data))
	}

	b := bytes.NewBuffer(data)
	vars := []interface{}{
		&m.Count,
		&m.Index,
		&m.ColorsCount,
		&m.Colors,
	}
	for _, v := range vars {
		if err := binary.Read(b, endian, v); err != nil {
			return fmt.Errorf("unable to read packet: %s", err)
		}
	}

	return nil
}

/////////////////////////////////////////////////////////////////////////////

type MultiZoneGetColorZones struct {
	StartIndex uint8
	EndIndex   uint8
}

func (m MultiZoneGetColorZones) Size() uint16 {
	return 2
}

func (m MultiZoneGetColorZones) Type() uint16 {
	return MultiZoneGetColorZonesType
}

func (m MultiZoneGetColorZones) MarshalBinary() ([]byte, error) {
	b := &bytes.Buffer{}

	data := []interface{}{
		m.StartIndex,
		m.EndIndex,
	}
	for _, d := range data {
		if err := binary.Write(b, endian, d); err != nil {
			return nil, err
		}
	}

	return b.Bytes(), nil
}

func (m *MultiZoneGetColorZones) UnmarshalBinary(data []byte) error {
	if int(m.Size()) != len(data) {
		return fmt.Errorf("expected %d bytes, got %d", m.Size(), len(data))
	}

	b := bytes.NewBuffer(data)
	vars := []interface{}{
		&m.StartIndex,
		&m.EndIndex,
	}
	for _, v := range vars {
		if err := binary.Read(b, endian, v); err != nil {
			return fmt.Errorf("unable to read packet: %s", err)
		}
	}

	return nil
}

/////////////////////////////////////////////////////////////////////////////

type MultiZoneGetEffect struct{}

func (m MultiZoneGetEffect) Size() uint16 {
	return 0
}

func (m MultiZoneGetEffect) Type() uint16 {
	return MultiZoneGetEffectType
}

func (m MultiZoneGetEffect) MarshalBinary() ([]byte, error) {
	return []byte{}, nil
}

func (m *MultiZoneGetEffect) UnmarshalBinary(data []byte) error {
	if len(data) > 0 {
		return fmt.Errorf("expected empty packet, got %d bytes", len(data))
	}

	return nil
}

/////////////////////////////////////////////////////////////////////////////

type MultiZoneSetColorZones struct {
	StartIndex uint8
	EndIndex   uint8
	Color      LightHsbk
	Duration   uint32
	Apply      MultiZoneApplicationRequest
}

func (m MultiZoneSetColorZones) Size() uint16 {
	return 15
}

func (m MultiZoneSetColorZones) Type() uint16 {
	return MultiZoneSetColorZonesType
}

func (m MultiZoneSetColorZones) MarshalBinary() ([]byte, error) {
	b := &bytes.Buffer{}

	data := []interface{}{
		m.StartIndex,
		m.EndIndex,
		m.Color,
		m.Duration,
		m.Apply,
	}
	for _, d := range data {
		if err := binary.Write(b, endian, d); err != nil {
			return nil, err
		}
	}

	return b.Bytes(), nil
}

func (m *MultiZoneSetColorZones) UnmarshalBinary(data []byte) error {
	if int(m.Size()) != len(data) {
		return fmt.Errorf("expected %d bytes, got %d", m.Size(), len(data))
	}

	b := bytes.NewBuffer(data)
	vars := []interface{}{
		&m.StartIndex,
		&m.EndIndex,
		&m.Color,
		&m.Duration,
		&m.Apply,
	}
	for _, v := range vars {
		if err := binary.Read(b, endian, v); err != nil {
			return fmt.Errorf("unable to read packet: %s", err)
		}
	}

	return nil
}

/////////////////////////////////////////////////////////////////////////////

type MultiZoneSetEffect struct {
	Settings MultiZoneEffectSettings
}

func (m MultiZoneSetEffect) Size() uint16 {
	return 59
}

func (m MultiZoneSetEffect) Type() uint16 {
	return MultiZoneSetEffectType
}

func (m MultiZoneSetEffect) MarshalBinary() ([]byte, error) {
	b := &bytes.Buffer{}

	data := []interface{}{
		m.Settings,
	}
	for _, d := range data {
		if err := binary.Write(b, endian, d); err != nil {
			return nil, err
		}
	}

	return b.Bytes(), nil
}

func (m *MultiZoneSetEffect) UnmarshalBinary(data []byte) error {
	if int(m.Size()) != len(data) {
		return fmt.Errorf("expected %d bytes, got %d", m.Size(), len(data))
	}

	b := bytes.NewBuffer(data)
	vars := []interface{}{
		&m.Settings,
	}
	for _, v := range vars {
		if err := binary.Read(b, endian, v); err != nil {
			return fmt.Errorf("unable to read packet: %s", err)
		}
	}

	return nil
}

/////////////////////////////////////////////////////////////////////////////

type MultiZoneStateEffect struct {
	Settings MultiZoneEffectSettings
}

func (m MultiZoneStateEffect) Size() uint16 {
	return 59
}

func (m MultiZoneStateEffect) Type() uint16 {
	return MultiZoneStateEffectType
}

func (m MultiZoneStateEffect) MarshalBinary() ([]byte, error) {
	b := &bytes.Buffer{}

	data := []interface{}{
		m.Settings,
	}
	for _, d := range data {
		if err := binary.Write(b, endian, d); err != nil {
			return nil, err
		}
	}

	return b.Bytes(), nil
}

func (m *MultiZoneStateEffect) UnmarshalBinary(data []byte) error {
	if int(m.Size()) != len(data) {
		return fmt.Errorf("expected %d bytes, got %d", m.Size(), len(data))
	}

	b := bytes.NewBuffer(data)
	vars := []interface{}{
		&m.Settings,
	}
	for _, v := range vars {
		if err := binary.Read(b, endian, v); err != nil {
			return fmt.Errorf("unable to read packet: %s", err)
		}
	}

	return nil
}

/////////////////////////////////////////////////////////////////////////////

type MultiZoneStateMultiZone struct {
	Count uint8
	Index uint8
	Color [8]LightHsbk
}

func (m MultiZoneStateMultiZone) Size() uint16 {
	return 66
}

func (m MultiZoneStateMultiZone) Type() uint16 {
	return MultiZoneStateMultiZoneType
}

func (m MultiZoneStateMultiZone) MarshalBinary() ([]byte, error) {
	b := &bytes.Buffer{}

	data := []interface{}{
		m.Count,
		m.Index,
		m.Color,
	}
	for _, d := range data {
		if err := binary.Write(b, endian, d); err != nil {
			return nil, err
		}
	}

	return b.Bytes(), nil
}

func (m *MultiZoneStateMultiZone) UnmarshalBinary(data []byte) error {
	if int(m.Size()) != len(data) {
		return fmt.Errorf("expected %d bytes, got %d", m.Size(), len(data))
	}

	b := bytes.NewBuffer(data)
	vars := []interface{}{
		&m.Count,
		&m.Index,
		&m.Color,
	}
	for _, v := range vars {
		if err := binary.Read(b, endian, v); err != nil {
			return fmt.Errorf("unable to read packet: %s", err)
		}
	}

	return nil
}

/////////////////////////////////////////////////////////////////////////////

type MultiZoneStateZone struct {
	Count uint8
	Index uint8
	Color LightHsbk
}

func (m MultiZoneStateZone) Size() uint16 {
	return 10
}

func (m MultiZoneStateZone) Type() uint16 {
	return MultiZoneStateZoneType
}

func (m MultiZoneStateZone) MarshalBinary() ([]byte, error) {
	b := &bytes.Buffer{}

	data := []interface{}{
		m.Count,
		m.Index,
		m.Color,
	}
	for _, d := range data {
		if err := binary.Write(b, endian, d); err != nil {
			return nil, err
		}
	}

	return b.Bytes(), nil
}

func (m *MultiZoneStateZone) UnmarshalBinary(data []byte) error {
	if int(m.Size()) != len(data) {
		return fmt.Errorf("expected %d bytes, got %d", m.Size(), len(data))
	}

	b := bytes.NewBuffer(data)
	vars := []interface{}{
		&m.Count,
		&m.Index,
		&m.Color,
	}
	for _, v := range vars {
		if err := binary.Read(b, endian, v); err != nil {
			return fmt.Errorf("unable to read packet: %s", err)
		}
	}

	return nil
}
