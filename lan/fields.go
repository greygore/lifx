// Code generated by "genlifx"; DO NOT EDIT.
package lan

import (
	"fmt"
	"strings"
)

type LightHsbk struct {
	Hue        uint16
	Saturation uint16
	Brightness uint16
	Kelvin     uint16
}

func (f LightHsbk) String() string {
	var s strings.Builder
	s.WriteString("LightHsbk:{")

	s.WriteString(fmt.Sprintf("Hue=%d", f.Hue))
	s.WriteString(fmt.Sprintf(",Saturation=%d", f.Saturation))
	s.WriteString(fmt.Sprintf(",Brightness=%d", f.Brightness))
	s.WriteString(fmt.Sprintf(",Kelvin=%d", f.Kelvin))
	s.WriteString("}")

	return s.String()
}

type MultiZoneEffectParameter struct {
	Parameter0 uint32
	Parameter1 uint32
	Parameter2 uint32
	Parameter3 uint32
	Parameter4 uint32
	Parameter5 uint32
	Parameter6 uint32
	Parameter7 uint32
}

func (f MultiZoneEffectParameter) String() string {
	var s strings.Builder
	s.WriteString("MultiZoneEffectParameter:{")

	s.WriteString(fmt.Sprintf("Parameter0=%d", f.Parameter0))
	s.WriteString(fmt.Sprintf(",Parameter1=%d", f.Parameter1))
	s.WriteString(fmt.Sprintf(",Parameter2=%d", f.Parameter2))
	s.WriteString(fmt.Sprintf(",Parameter3=%d", f.Parameter3))
	s.WriteString(fmt.Sprintf(",Parameter4=%d", f.Parameter4))
	s.WriteString(fmt.Sprintf(",Parameter5=%d", f.Parameter5))
	s.WriteString(fmt.Sprintf(",Parameter6=%d", f.Parameter6))
	s.WriteString(fmt.Sprintf(",Parameter7=%d", f.Parameter7))
	s.WriteString("}")

	return s.String()
}

type MultiZoneEffectSettings struct {
	Instanceid uint32
	Type       MultiZoneEffectType
	Speed      uint32
	Duration   uint64
	Parameter  MultiZoneEffectParameter
}

func (f MultiZoneEffectSettings) String() string {
	var s strings.Builder
	s.WriteString("MultiZoneEffectSettings:{")

	s.WriteString(fmt.Sprintf("Instanceid=%d", f.Instanceid))
	s.WriteString(fmt.Sprintf(",Type=%s", f.Type))
	s.WriteString(fmt.Sprintf(",Speed=%d", f.Speed))
	s.WriteString(fmt.Sprintf(",Duration=%d", f.Duration))
	s.WriteString(fmt.Sprintf(",Parameter=%s", f.Parameter))
	s.WriteString("}")

	return s.String()
}

type TileAccelMeas struct {
	X int16
	Y int16
	Z int16
}

func (f TileAccelMeas) String() string {
	var s strings.Builder
	s.WriteString("TileAccelMeas:{")

	s.WriteString(fmt.Sprintf("X=%d", f.X))
	s.WriteString(fmt.Sprintf(",Y=%d", f.Y))
	s.WriteString(fmt.Sprintf(",Z=%d", f.Z))
	s.WriteString("}")

	return s.String()
}

type TileBufferRect struct {
	X     uint8
	Y     uint8
	Width uint8
}

func (f TileBufferRect) String() string {
	var s strings.Builder
	s.WriteString("TileBufferRect:{")

	s.WriteString(fmt.Sprintf("X=%d", f.X))
	s.WriteString(fmt.Sprintf(",Y=%d", f.Y))
	s.WriteString(fmt.Sprintf(",Width=%d", f.Width))
	s.WriteString("}")

	return s.String()
}

type TileEffectParameter struct {
	Parameter0 uint32
	Parameter1 uint32
	Parameter2 uint32
	Parameter3 uint32
	Parameter4 uint32
	Parameter5 uint32
	Parameter6 uint32
	Parameter7 uint32
}

func (f TileEffectParameter) String() string {
	var s strings.Builder
	s.WriteString("TileEffectParameter:{")

	s.WriteString(fmt.Sprintf("Parameter0=%d", f.Parameter0))
	s.WriteString(fmt.Sprintf(",Parameter1=%d", f.Parameter1))
	s.WriteString(fmt.Sprintf(",Parameter2=%d", f.Parameter2))
	s.WriteString(fmt.Sprintf(",Parameter3=%d", f.Parameter3))
	s.WriteString(fmt.Sprintf(",Parameter4=%d", f.Parameter4))
	s.WriteString(fmt.Sprintf(",Parameter5=%d", f.Parameter5))
	s.WriteString(fmt.Sprintf(",Parameter6=%d", f.Parameter6))
	s.WriteString(fmt.Sprintf(",Parameter7=%d", f.Parameter7))
	s.WriteString("}")

	return s.String()
}

type TileEffectSettings struct {
	Instanceid   uint32
	Type         TileEffectType
	Speed        uint32
	Duration     uint64
	Reserved0    uint32
	Reserved1    uint32
	Parameter    TileEffectParameter
	PaletteCount uint8
	Palette      [16]LightHsbk
}

func (f TileEffectSettings) String() string {
	var s strings.Builder
	s.WriteString("TileEffectSettings:{")

	s.WriteString(fmt.Sprintf("Instanceid=%d", f.Instanceid))
	s.WriteString(fmt.Sprintf(",Type=%s", f.Type))
	s.WriteString(fmt.Sprintf(",Speed=%d", f.Speed))
	s.WriteString(fmt.Sprintf(",Duration=%d", f.Duration))
	s.WriteString(fmt.Sprintf(",Reserved0=%d", f.Reserved0))
	s.WriteString(fmt.Sprintf(",Reserved1=%d", f.Reserved1))
	s.WriteString(fmt.Sprintf(",Parameter=%s", f.Parameter))
	s.WriteString(fmt.Sprintf(",PaletteCount=%d", f.PaletteCount))
	s.WriteString(fmt.Sprintf(",Palette=%s", f.Palette))
	s.WriteString("}")

	return s.String()
}

type TileStateDevice struct {
	AccelMeas     TileAccelMeas
	UserX         float32
	UserY         float32
	Width         uint8
	Height        uint8
	DeviceVersion DeviceStateVersion
	Firmware      DeviceStateHostFirmware
}

func (f TileStateDevice) String() string {
	var s strings.Builder
	s.WriteString("TileStateDevice:{")

	s.WriteString(fmt.Sprintf("AccelMeas=%s", f.AccelMeas))
	s.WriteString(fmt.Sprintf(",UserX=%f", f.UserX))
	s.WriteString(fmt.Sprintf(",UserY=%f", f.UserY))
	s.WriteString(fmt.Sprintf(",Width=%d", f.Width))
	s.WriteString(fmt.Sprintf(",Height=%d", f.Height))
	s.WriteString(fmt.Sprintf(",DeviceVersion=%s", f.DeviceVersion))
	s.WriteString(fmt.Sprintf(",Firmware=%s", f.Firmware))
	s.WriteString("}")

	return s.String()
}
