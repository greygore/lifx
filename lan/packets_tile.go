// Code generated by "genlifx"; DO NOT EDIT.
package lan

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"strings"
)

// message types
const (
	TileGet64Type            = 707
	TileGetDeviceChainType   = 701
	TileGetEffectType        = 718
	TileSet64Type            = 715
	TileSetEffectType        = 719
	TileSetUserPositionType  = 703
	TileState64Type          = 711
	TileStateDeviceChainType = 702
	TileStateEffectType      = 720
)

/////////////////////////////////////////////////////////////////////////////

type TileGet64 struct {
	TileIndex uint8
	Length    uint8
	Rect      TileBufferRect
}

func (m TileGet64) Size() uint16 {
	return 6
}

func (m TileGet64) Type() uint16 {
	return TileGet64Type
}

func (m TileGet64) MarshalBinary() ([]byte, error) {
	b := &bytes.Buffer{}

	data := []interface{}{
		m.TileIndex,
		m.Length,
		m.Rect,
	}
	for _, d := range data {
		if err := binary.Write(b, endian, d); err != nil {
			return nil, err
		}
	}

	return b.Bytes(), nil
}

func (m *TileGet64) UnmarshalBinary(data []byte) error {
	if int(m.Size()) != len(data) {
		return fmt.Errorf("expected %d bytes, got %d", m.Size(), len(data))
	}

	b := bytes.NewBuffer(data)
	vars := []interface{}{
		&m.TileIndex,
		&m.Length,
		&m.Rect,
	}
	for _, v := range vars {
		if err := binary.Read(b, endian, v); err != nil {
			return fmt.Errorf("unable to read packet: %s", err)
		}
	}

	return nil
}

func (m TileGet64) String() string {
	var s strings.Builder
	s.WriteString("TileGet64:")

	s.WriteString(fmt.Sprintf("TileIndex=%d", m.TileIndex))
	s.WriteString(fmt.Sprintf(",Length=%d", m.Length))
	s.WriteString(fmt.Sprintf(",Rect=%s", m.Rect))

	return s.String()
}

/////////////////////////////////////////////////////////////////////////////

type TileGetDeviceChain struct{}

func (m TileGetDeviceChain) Size() uint16 {
	return 0
}

func (m TileGetDeviceChain) Type() uint16 {
	return TileGetDeviceChainType
}

func (m TileGetDeviceChain) MarshalBinary() ([]byte, error) {
	return []byte{}, nil
}

func (m *TileGetDeviceChain) UnmarshalBinary(data []byte) error {
	if len(data) > 0 {
		return fmt.Errorf("expected empty packet, got %d bytes", len(data))
	}

	return nil
}

func (m TileGetDeviceChain) String() string {
	return "TileGetDeviceChain"
}

/////////////////////////////////////////////////////////////////////////////

type TileGetEffect struct {
	Reserved0 uint8
	Reserved1 uint8
}

func (m TileGetEffect) Size() uint16 {
	return 2
}

func (m TileGetEffect) Type() uint16 {
	return TileGetEffectType
}

func (m TileGetEffect) MarshalBinary() ([]byte, error) {
	b := &bytes.Buffer{}

	data := []interface{}{
		m.Reserved0,
		m.Reserved1,
	}
	for _, d := range data {
		if err := binary.Write(b, endian, d); err != nil {
			return nil, err
		}
	}

	return b.Bytes(), nil
}

func (m *TileGetEffect) UnmarshalBinary(data []byte) error {
	if int(m.Size()) != len(data) {
		return fmt.Errorf("expected %d bytes, got %d", m.Size(), len(data))
	}

	b := bytes.NewBuffer(data)
	vars := []interface{}{
		&m.Reserved0,
		&m.Reserved1,
	}
	for _, v := range vars {
		if err := binary.Read(b, endian, v); err != nil {
			return fmt.Errorf("unable to read packet: %s", err)
		}
	}

	return nil
}

func (m TileGetEffect) String() string {
	var s strings.Builder
	s.WriteString("TileGetEffect:")

	s.WriteString(fmt.Sprintf("Reserved0=%d", m.Reserved0))
	s.WriteString(fmt.Sprintf(",Reserved1=%d", m.Reserved1))

	return s.String()
}

/////////////////////////////////////////////////////////////////////////////

type TileSet64 struct {
	TileIndex uint8
	Length    uint8
	Rect      TileBufferRect
	Duration  uint32
	Colors    [64]LightHsbk
}

func (m TileSet64) Size() uint16 {
	return 522
}

func (m TileSet64) Type() uint16 {
	return TileSet64Type
}

func (m TileSet64) MarshalBinary() ([]byte, error) {
	b := &bytes.Buffer{}

	data := []interface{}{
		m.TileIndex,
		m.Length,
		m.Rect,
		m.Duration,
		m.Colors,
	}
	for _, d := range data {
		if err := binary.Write(b, endian, d); err != nil {
			return nil, err
		}
	}

	return b.Bytes(), nil
}

func (m *TileSet64) UnmarshalBinary(data []byte) error {
	if int(m.Size()) != len(data) {
		return fmt.Errorf("expected %d bytes, got %d", m.Size(), len(data))
	}

	b := bytes.NewBuffer(data)
	vars := []interface{}{
		&m.TileIndex,
		&m.Length,
		&m.Rect,
		&m.Duration,
		&m.Colors,
	}
	for _, v := range vars {
		if err := binary.Read(b, endian, v); err != nil {
			return fmt.Errorf("unable to read packet: %s", err)
		}
	}

	return nil
}

func (m TileSet64) String() string {
	var s strings.Builder
	s.WriteString("TileSet64:")

	s.WriteString(fmt.Sprintf("TileIndex=%d", m.TileIndex))
	s.WriteString(fmt.Sprintf(",Length=%d", m.Length))
	s.WriteString(fmt.Sprintf(",Rect=%s", m.Rect))
	s.WriteString(fmt.Sprintf(",Duration=%d", m.Duration))
	s.WriteString(fmt.Sprintf(",Colors=%s", m.Colors))

	return s.String()
}

/////////////////////////////////////////////////////////////////////////////

type TileSetEffect struct {
	Reserved0 uint8
	Reserved1 uint8
	Settings  TileEffectSettings
}

func (m TileSetEffect) Size() uint16 {
	return 188
}

func (m TileSetEffect) Type() uint16 {
	return TileSetEffectType
}

func (m TileSetEffect) MarshalBinary() ([]byte, error) {
	b := &bytes.Buffer{}

	data := []interface{}{
		m.Reserved0,
		m.Reserved1,
		m.Settings,
	}
	for _, d := range data {
		if err := binary.Write(b, endian, d); err != nil {
			return nil, err
		}
	}

	return b.Bytes(), nil
}

func (m *TileSetEffect) UnmarshalBinary(data []byte) error {
	if int(m.Size()) != len(data) {
		return fmt.Errorf("expected %d bytes, got %d", m.Size(), len(data))
	}

	b := bytes.NewBuffer(data)
	vars := []interface{}{
		&m.Reserved0,
		&m.Reserved1,
		&m.Settings,
	}
	for _, v := range vars {
		if err := binary.Read(b, endian, v); err != nil {
			return fmt.Errorf("unable to read packet: %s", err)
		}
	}

	return nil
}

func (m TileSetEffect) String() string {
	var s strings.Builder
	s.WriteString("TileSetEffect:")

	s.WriteString(fmt.Sprintf("Reserved0=%d", m.Reserved0))
	s.WriteString(fmt.Sprintf(",Reserved1=%d", m.Reserved1))
	s.WriteString(fmt.Sprintf(",Settings=%s", m.Settings))

	return s.String()
}

/////////////////////////////////////////////////////////////////////////////

type TileSetUserPosition struct {
	TileIndex uint8
	Reserved1 [2]byte
	UserX     float32
	UserY     float32
}

func (m TileSetUserPosition) Size() uint16 {
	return 11
}

func (m TileSetUserPosition) Type() uint16 {
	return TileSetUserPositionType
}

func (m TileSetUserPosition) MarshalBinary() ([]byte, error) {
	b := &bytes.Buffer{}

	data := []interface{}{
		m.TileIndex,
		m.Reserved1,
		m.UserX,
		m.UserY,
	}
	for _, d := range data {
		if err := binary.Write(b, endian, d); err != nil {
			return nil, err
		}
	}

	return b.Bytes(), nil
}

func (m *TileSetUserPosition) UnmarshalBinary(data []byte) error {
	if int(m.Size()) != len(data) {
		return fmt.Errorf("expected %d bytes, got %d", m.Size(), len(data))
	}

	b := bytes.NewBuffer(data)
	vars := []interface{}{
		&m.TileIndex,
		&m.Reserved1,
		&m.UserX,
		&m.UserY,
	}
	for _, v := range vars {
		if err := binary.Read(b, endian, v); err != nil {
			return fmt.Errorf("unable to read packet: %s", err)
		}
	}

	return nil
}

func (m TileSetUserPosition) String() string {
	var s strings.Builder
	s.WriteString("TileSetUserPosition:")

	s.WriteString(fmt.Sprintf("TileIndex=%d", m.TileIndex))

	s.WriteString(fmt.Sprintf(",UserX=%f", m.UserX))
	s.WriteString(fmt.Sprintf(",UserY=%f", m.UserY))

	return s.String()
}

/////////////////////////////////////////////////////////////////////////////

type TileState64 struct {
	TileIndex uint8
	Rect      TileBufferRect
	Colors    [64]LightHsbk
}

func (m TileState64) Size() uint16 {
	return 517
}

func (m TileState64) Type() uint16 {
	return TileState64Type
}

func (m TileState64) MarshalBinary() ([]byte, error) {
	b := &bytes.Buffer{}

	data := []interface{}{
		m.TileIndex,
		m.Rect,
		m.Colors,
	}
	for _, d := range data {
		if err := binary.Write(b, endian, d); err != nil {
			return nil, err
		}
	}

	return b.Bytes(), nil
}

func (m *TileState64) UnmarshalBinary(data []byte) error {
	if int(m.Size()) != len(data) {
		return fmt.Errorf("expected %d bytes, got %d", m.Size(), len(data))
	}

	b := bytes.NewBuffer(data)
	vars := []interface{}{
		&m.TileIndex,
		&m.Rect,
		&m.Colors,
	}
	for _, v := range vars {
		if err := binary.Read(b, endian, v); err != nil {
			return fmt.Errorf("unable to read packet: %s", err)
		}
	}

	return nil
}

func (m TileState64) String() string {
	var s strings.Builder
	s.WriteString("TileState64:")

	s.WriteString(fmt.Sprintf("TileIndex=%d", m.TileIndex))
	s.WriteString(fmt.Sprintf(",Rect=%s", m.Rect))
	s.WriteString(fmt.Sprintf(",Colors=%s", m.Colors))

	return s.String()
}

/////////////////////////////////////////////////////////////////////////////

type TileStateDeviceChain struct {
	StartIndex       uint8
	TileDevices      [16]TileStateDevice
	TileDevicesCount uint8
}

func (m TileStateDeviceChain) Size() uint16 {
	return 882
}

func (m TileStateDeviceChain) Type() uint16 {
	return TileStateDeviceChainType
}

func (m TileStateDeviceChain) MarshalBinary() ([]byte, error) {
	b := &bytes.Buffer{}

	data := []interface{}{
		m.StartIndex,
		m.TileDevices,
		m.TileDevicesCount,
	}
	for _, d := range data {
		if err := binary.Write(b, endian, d); err != nil {
			return nil, err
		}
	}

	return b.Bytes(), nil
}

func (m *TileStateDeviceChain) UnmarshalBinary(data []byte) error {
	if int(m.Size()) != len(data) {
		return fmt.Errorf("expected %d bytes, got %d", m.Size(), len(data))
	}

	b := bytes.NewBuffer(data)
	vars := []interface{}{
		&m.StartIndex,
		&m.TileDevices,
		&m.TileDevicesCount,
	}
	for _, v := range vars {
		if err := binary.Read(b, endian, v); err != nil {
			return fmt.Errorf("unable to read packet: %s", err)
		}
	}

	return nil
}

func (m TileStateDeviceChain) String() string {
	var s strings.Builder
	s.WriteString("TileStateDeviceChain:")

	s.WriteString(fmt.Sprintf("StartIndex=%d", m.StartIndex))
	s.WriteString(fmt.Sprintf(",TileDevices=%s", m.TileDevices))
	s.WriteString(fmt.Sprintf(",TileDevicesCount=%d", m.TileDevicesCount))

	return s.String()
}

/////////////////////////////////////////////////////////////////////////////

type TileStateEffect struct {
	Reserved0 uint8
	Settings  TileEffectSettings
}

func (m TileStateEffect) Size() uint16 {
	return 187
}

func (m TileStateEffect) Type() uint16 {
	return TileStateEffectType
}

func (m TileStateEffect) MarshalBinary() ([]byte, error) {
	b := &bytes.Buffer{}

	data := []interface{}{
		m.Reserved0,
		m.Settings,
	}
	for _, d := range data {
		if err := binary.Write(b, endian, d); err != nil {
			return nil, err
		}
	}

	return b.Bytes(), nil
}

func (m *TileStateEffect) UnmarshalBinary(data []byte) error {
	if int(m.Size()) != len(data) {
		return fmt.Errorf("expected %d bytes, got %d", m.Size(), len(data))
	}

	b := bytes.NewBuffer(data)
	vars := []interface{}{
		&m.Reserved0,
		&m.Settings,
	}
	for _, v := range vars {
		if err := binary.Read(b, endian, v); err != nil {
			return fmt.Errorf("unable to read packet: %s", err)
		}
	}

	return nil
}

func (m TileStateEffect) String() string {
	var s strings.Builder
	s.WriteString("TileStateEffect:")

	s.WriteString(fmt.Sprintf("Reserved0=%d", m.Reserved0))
	s.WriteString(fmt.Sprintf(",Settings=%s", m.Settings))

	return s.String()
}
